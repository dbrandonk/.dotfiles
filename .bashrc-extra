#####################################################################################
# Terminal settings
set -o vi

####################################################################################
# fzf stuff

# Append this line to ~/.bashrc to enable fzf keybindings for Bash:
source /usr/share/doc/fzf/examples/key-bindings.bash
####################################################################################
# ALIAS

# Edit this .bashrc file
alias ebrc='edit ~/.bashrc'
alias sb='source ~/.bashrc'

# alias to show the date
alias da='date +%Y-%m-%d-%H-%M-%S'

# Alias's to modified commands
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -iv'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'

# Change directory aliases
alias home='cd ~'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Remove a directory and all files
alias rmd='rm  --recursive --force --verbose '

# Alias's for multiple directory listing commands
alias la='ls -Alh' # show hidden files
alias ls='ls -Fh --color=always' # add colors and file type extensions
alias lx='ls -lXBh' # sort by extension
alias lk='ls -lSrh' # sort by size
alias lc='ls -lcrh' # sort by change time
alias lu='ls -lurh' # sort by access time
alias lr='ls -lRh' # recursive ls
alias lt='ls -ltrh' # sort by date
alias lm='ls -alh |more' # pipe through 'more'
alias lw='ls -xAh' # wide listing format
alias ll='ls -Fls' # long listing format
alias labc='ls -lap' #alphabetical sort
alias lf="ls -l | egrep -v '^d'" # files only
alias ldir="ls -l | egrep '^d'" # directories only

# alias chmod commands
alias mx='chmod a+x'
alias 000='chmod -R 000'
alias 644='chmod -R 644'
alias 666='chmod -R 666'
alias 755='chmod -R 755'
alias 777='chmod -R 777'

# Search command line history
alias h="history | grep "

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Search files in the current folder
alias f="find . | grep "

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

# To see if a command is aliased, a file, or a built-in command
alias checkcommand="type -t"

# Alias's to show disk space and space used in a folder
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

# Show all logs in /var/log
alias logs="sudo find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

# git aliases
alias gs='git status'
gbl () ( git blame $@ | vim -R -)
alias gc='git checkout'

# colcon aliases
alias cbpu='colcon build --packages-up-to'
alias cbps='colcon build --packages-select'
alias ctps='colcon test --packages-select'

# sgpt
alias chat='sgpt --repl temp'

#################################################################################
#FUNCTIONS

# Extracts any archive(s) (if unp isn't installed)
extract () {
	for archive in $*; do
		if [ -f $archive ] ; then
			case $archive in
				*.tar.bz2)   tar xvjf $archive    ;;
				*.tar.gz)    tar xvzf $archive    ;;
				*.bz2)       bunzip2 $archive     ;;
				*.rar)       rar x $archive       ;;
				*.gz)        gunzip $archive      ;;
				*.tar)       tar xvf $archive     ;;
				*.tbz2)      tar xvjf $archive    ;;
				*.tgz)       tar xvzf $archive    ;;
				*.zip)       unzip $archive       ;;
				*.Z)         uncompress $archive  ;;
				*.7z)        7z x $archive        ;;
				*)           echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Goes up a specified number of directories  (i.e. up 4)
up ()
{
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++))
		do
			d=$d/..
		done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

mapnet () ( nmap -sn $@/24 )
format() (clang-format -style=file -i $@)
format-all() (git diff --name-only | xargs clang-format -style=file -i)

colcon-tidy () (
 INCLUDE_DIRS=""
 for dir in $(echo $AMENT_PREFIX_PATH | tr ':' ' '); do
   INCLUDE_DIRS="$INCLUDE_DIRS -I$dir/include"
 done
 clang-tidy $@ --checks=* -- $INCLUDE_DIRS
) 

vpn()
(
 sudo openvpn --config ~/.client.ovpn
)

dev()
(
 xhost +local:root
 if docker exec -it bk-dev-container /bin/bash; then :
 elif docker start -ai bk-dev-container; then :
 else
   docker compose -f ~/Development/bk-dev-kit/bk-dev-docker/docker-compose.yml up -d
 fi
)

dev-stop()
(
   docker compose -f ~/Development/bk-dev-kit/bk-dev-docker/docker-compose.yml down
   xhost -local:root
)

dev-build-spec()
(
 yes | cp -rf ~/.ssh $HOME/Development/bk-dev-kit/bk-dev-docker/
 docker build --build-arg BASE_IMAGE=$1 --build-arg GIT_EMAIL=$2 -t bk-dev-docker:latest $HOME/Development/bk-dev-kit/bk-dev-docker/.
 rm -rf $HOME/Development/bk-dev-kit/bk-dev-docker/.ssh
)

dev-build-home()
(
 dev-build-spec ubuntu:20.04 d.brandonk@gmail.com
)

#####################################################################################
# Default editor
export VISUAL=vim;
export EDITOR=vim;

#####################################################################################
# Misc exports
export TMOUT=0

#####################################################################################
# Disable software flow control
stty -ixon

#####################################################################################
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
   . /etc/bash_completion
fi

#####################################################################################
# Start tmux when opening a terminal. 
# Ensure the following
# 1. tmux exists on the system
# 2. we're in an interactive shell
# 3. tmux doesn't try to run within itself

#if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#  exec tmux
#fi
